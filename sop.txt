🧑‍💻 Full Stack Job Portal Website — Step-by-Step for a Solo Developer
⚙️ PHASE 1: Project Planning
🎯 Goal
A web app where:

Job Seekers can register, login, search/apply for jobs.

Recruiters can register, post jobs, view applicants.

👥 User Roles
Job Seeker

Recruiter

(Optional) Admin

🔧 PHASE 2: Project Setup
🔹 Step 1: Create project folders
bash
Copy
Edit
/job-portal/
├── backend/
└── frontend/
🔙 PHASE 3: BACKEND (Node.js + Express + MongoDB)
📦 Step 2: Backend Setup
bash
Copy
Edit
cd backend
npm init -y
npm install express mongoose cors dotenv bcryptjs jsonwebtoken
npm install nodemon --save-dev
📁 Folder Structure:
bash
Copy
Edit
/backend
├── controllers/
├── models/
├── routes/
├── middlewares/
├── config/
├── .env
├── server.js
🧩 Step 3: Setup MongoDB
Use MongoDB Atlas or local MongoDB.

📄 .env
env
Copy
Edit
PORT=5000
MONGO_URI=mongodb://localhost:27017/jobPortal
JWT_SECRET=yourSecretKey
📄 config/db.js
js
Copy
Edit
import mongoose from "mongoose";

export const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    console.log("MongoDB connected");
  } catch (err) {
    console.error(err.message);
    process.exit(1);
  }
};
🧪 Step 4: Create Models
models/User.js
js
Copy
Edit
import mongoose from "mongoose";

const userSchema = new mongoose.Schema({
  name: String,
  email: { type: String, unique: true },
  password: String,
  role: { type: String, enum: ["jobseeker", "recruiter"] },
});

export default mongoose.model("User", userSchema);
models/Job.js
js
Copy
Edit
import mongoose from "mongoose";

const jobSchema = new mongoose.Schema({
  title: String,
  description: String,
  company: String,
  location: String,
  type: String, // part-time, remote
  postedBy: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
  createdAt: { type: Date, default: Date.now },
});

export default mongoose.model("Job", jobSchema);
🔐 Step 5: Authentication
Register/Login Controller (controllers/authController.js)
Use bcryptjs to hash passwords

Use jsonwebtoken to generate tokens

🚏 Step 6: Routes
/routes/auth.js
POST /register

POST /login

/routes/jobs.js
POST /post-job (protected)

GET /jobs (public)

🛡️ Step 7: Middleware
middlewares/authMiddleware.js
Check JWT token and attach user to request.

🚀 Step 8: Launch Backend
server.js
js
Copy
Edit
import express from "express";
import dotenv from "dotenv";
import cors from "cors";
import { connectDB } from "./config/db.js";

dotenv.config();
const app = express();
app.use(cors());
app.use(express.json());

connectDB();

app.use("/api/auth", authRoutes);
app.use("/api/jobs", jobRoutes);

app.listen(process.env.PORT, () => {
  console.log(`Server running on port ${process.env.PORT}`);
});
Test with Postman:

Register

Login

Post job

Get jobs

🧑‍🎨 PHASE 4: FRONTEND (React.js)
🧱 Step 9: Frontend Setup
bash
Copy
Edit
cd ../frontend
npx create-react-app .
npm install axios react-router-dom
Folder Structure:
bash
Copy
Edit
/frontend
├── src/
│   ├── pages/
│   ├── components/
│   ├── context/
│   ├── App.js
│   ├── index.js
🧭 Step 10: Routing Setup
Use react-router-dom:

/login

/register

/jobs

/post-job

/dashboard

🧠 Step 11: Auth Context
Use React Context to:

Store token/user info

Handle logout

Show user role

🧩 Step 12: Build Pages
Pages to Build:
LoginPage

RegisterPage

JobsPage (list jobs)

PostJobPage (recruiters only)

DashboardPage (future)

Components:
Navbar

JobCard

JobForm

🔗 Step 13: Connect to Backend
Use axios to make requests:

js
Copy
Edit
axios.post("http://localhost:5000/api/auth/login", {
  email, password
});
Store JWT in localStorage and attach to headers.

🔒 Step 14: Protect Routes
Create PrivateRoute.js to:

Allow only logged-in users to post jobs

Redirect unauthorized users

💄 Step 15: Styling
Options:

Tailwind CSS

Bootstrap

CSS Modules

☁️ PHASE 5: DEPLOYMENT
🌐 Step 16: Deploy Backend
Use Render, Railway, or VPS

Setup .env online

🖥️ Step 17: Deploy Frontend
Use Vercel or Netlify

✅ Step 18: Test Everything Live
Check job posting, login, search

Mobile responsiveness

🚀 Final Touches
Add resume upload (Cloudinary)

Add email notifications

Add job filters/search by skill

Would you like me to now:

Start coding backend files step-by-step?

Or start frontend first?

Let me know your next step!

A network error occurred. Please check your connection and try again. If this issue persists please contact us through our help center at help.openai.com.







You said:
i am using mysql so please update the code


ChatGPT said:
Updated saved memory
Great! Since you're using MySQL instead of MongoDB, we’ll update the entire backend setup accordingly using Node.js + Express + Sequelize (ORM for MySQL).

🔙 Updated Backend Stack (MySQL + Sequelize)
✅ Step 1: Backend Setup (MySQL version)
📁 Folder structure:
bash
Copy
Edit
backend/
├── config/
│   └── db.js             # Sequelize & MySQL setup
├── controllers/
│   └── authController.js
│   └── jobController.js
├── models/
│   └── index.js          # Sequelize init
│   └── User.js
│   └── Job.js
├── routes/
│   └── authRoutes.js
│   └── jobRoutes.js
├── middlewares/
│   └── authMiddleware.js
├── server.js
├── .env
✅ Step 2: Install Required Packages
bash
Copy
Edit
npm install express sequelize mysql2 dotenv cors jsonwebtoken bcryptjs
npm install --save-dev nodemon
✅ Step 3: Setup .env
env
Copy
Edit
PORT=5000
DB_HOST=localhost
DB_USER=root
DB_PASS=yourPassword
DB_NAME=job_portal
JWT_SECRET=yourSecretKey
✅ Step 4: Setup Sequelize and DB
📄 config/db.js
js
Copy
Edit
import { Sequelize } from 'sequelize';
import dotenv from 'dotenv';
dotenv.config();

export const sequelize = new Sequelize(
  process.env.DB_NAME,
  process.env.DB_USER,
  process.env.DB_PASS,
  {
    host: process.env.DB_HOST,
    dialect: 'mysql',
    logging: false,
  }
);
✅ Step 5: Define Models
📄 models/User.js
js
Copy
Edit
import { DataTypes } from "sequelize";
import { sequelize } from "../config/db.js";

export const User = sequelize.define("User", {
  name: DataTypes.STRING,
  email: { type: DataTypes.STRING, unique: true },
  password: DataTypes.STRING,
  role: { type: DataTypes.ENUM("jobseeker", "recruiter") },
});
📄 models/Job.js
js
Copy
Edit
import { DataTypes } from "sequelize";
import { sequelize } from "../config/db.js";
import { User } from "./User.js";

export const Job = sequelize.define("Job", {
  title: DataTypes.STRING,
  description: DataTypes.TEXT,
  company: DataTypes.STRING,
  location: DataTypes.STRING,
  type: DataTypes.STRING,
});

Job.belongsTo(User, { foreignKey: "postedBy" });
User.hasMany(Job, { foreignKey: "postedBy" });
📄 models/index.js
js
Copy
Edit
import { sequelize } from "../config/db.js";
import { User } from "./User.js";
import { Job } from "./Job.js";

// Initialize all models
export { sequelize, User, Job };
✅ Step 6: Setup server.js
js
Copy
Edit
import express from "express";
import dotenv from "dotenv";
import cors from "cors";
import { sequelize } from "./models/index.js";
import authRoutes from "./routes/authRoutes.js";
import jobRoutes from "./routes/jobRoutes.js";

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());

app.use("/api/auth", authRoutes);
app.use("/api/jobs", jobRoutes);

const PORT = process.env.PORT || 5000;

sequelize.sync({ alter: true }).then(() => {
  console.log("MySQL DB synced.");
  app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
});
Once this setup is ready, we’ll move to:

✅ Step 7: Auth (Register/Login using JWT)
Would you like to proceed with the Auth API next or set up Job Posting API first?

Let me know what you want to build now!










Tools



